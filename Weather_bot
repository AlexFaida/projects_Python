!pip install aiogram
import nest_asyncio
nest_asyncio.apply()
import sqlite3
import aiohttp
import asyncio

from os import getenv
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import Message
from aiogram.enums import ParseMode

storage = MemoryStorage()

dp = Dispatcher(storage=storage)
connection = sqlite3.connect("data.db")
q = connection.cursor()


q.execute("""CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                nickname TEXT,
                city TEXT
            )""")
connection.commit()


@dp.message(CommandStart())
async def start(message: Message):
    caption = (
        "<b>–ü—Ä–∏–≤–µ—Ç! –Ø weather_bot. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞.</b>\n\n"
        "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:</b> <code>/weather_city –ì–æ—Ä–æ–¥</code>\n"
        "<b>–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É</b>: <code>/weather</code>."
    )
    await message.answer_photo(
        photo = 'https://www.cmegroup.com/trading/weather/images/weather-700x180.jpg',
        caption=caption,
    )
@dp.message(Command("weather_city"))
async def weather_city(message: Message, command: CommandObject):
    args = command.args
    city = args.strip()

    if not city:
        return await message.answer("<b>üö´ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥ –≤ –∫–æ–º–∞–Ω–¥–µ. –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å: <code>/weather_city –¢–∞—à–∫–µ–Ω—Ç</code></b>")

    user_id = message.from_user.id
    username = message.from_user.username
    nickname = message.from_user.first_name

    q.execute("INSERT OR IGNORE INTO users (user_id, username, nickname) VALUES (?, ?, ?)", (user_id, username, nickname))
    q.execute("UPDATE users SET city = ? WHERE user_id = ?", (city, user_id))
    connection.commit()

    await message.answer(f"<b> ü´∂ –í–∞—à —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥</b>: <code>{city}</code>")


@dp.message(Command("weather"))
async def weather(message: Message):
    user_id = message.from_user.id
    q.execute("SELECT city FROM users WHERE user_id = ?", (user_id,))
    result = q.fetchone()
    city = result[0] if result else None

    if not city:
        return await message.answer("<b>üö´ –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather_city [–≥–æ—Ä–æ–¥], —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.</b>")

    api_key = "YOUR_OPEN_WEATHER_TOKEN"
    units = "metric"
    api_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units={units}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url) as response:
                response.raise_for_status()
                weather_data = await response.json()

        temperature = weather_data["main"]["temp"]
        humidity = weather_data["main"]["humidity"]
        wind_speed = weather_data["wind"]["speed"]
        weather_description = weather_data["weather"][0]["description"]

        t_emoji = "üå°" if temperature > 0 else "‚ùÑÔ∏è"

        weather_img = {
            "clear sky": "https://vgorode.ua/img/article/2612/74_main-v1566339667.jpg",
            "smoke": "https://itd3.mycdn.me/image?id=836731980264&t=20&plc=WEB&tkn=*nUvA0MhNdy2Ptc4sJFucoDi2V2Q",
            "scattered clouds": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTA1ZnVle-92XHl8DuZicEUj-Cj4XMv625jWA&s",
            "few clouds": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRmYOMkD1s1fQu1rlVJBCa4gwjBh6hIIdZtAw&s",
        }

        photo_url = weather_img.get(weather_description, "https://i.pinimg.com/originals/1a/fa/78/1afa78467485e10e3a3ada4962e2a86a.jpg")
        caption = (
            "<b>‚ùî –í–æ—Ç –ø–æ–≥–æ–¥–∞ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ</b>:\n\n"
            f"<pre><code class='language-weather'>üå§ <b>–ì–æ—Ä–æ–¥</b>: {city}\n"
            f"{t_emoji} <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> <u>{temperature}¬∞C</u>\n"
            f"üíß <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å</b>: {humidity}%\n"
            f"üí® <b>–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞</b>: {wind_speed} –º/—Å\n"
            f"‚òÄÔ∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {weather_description}</code></pre>\n"
        )
        await message.answer_photo(photo=photo_url, caption=caption)

    except aiohttp.ClientError:
        await message.answer(f"<b>üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>")


async def main():
    TOKEN = getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
    await dp.start_polling(bot)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    try:
        asyncio.run(main())
    finally:
        connection.close()
